%{
#include <stdio.h>
#include <stdlib.h>
extern int yylex();
extern char* yytext;
extern int yylineno;

int valid_syntax = 1; // Indicates whether the syntax is valid or not

void yyerror(const char* s);

extern FILE* yyin; // Declare yyin as an external variable

%}

%union {
    char* str_val;
}

%token <str_val> IDENTIFIER NUMBER INT FLOAT WHILE IF ELSE LESS_EQUAL SEMICOLON ASSIGN OPEN_BRACE CLOSE_BRACE

%left '+' '-'
%left '*' '/'
%right '='
%nonassoc UMINUS

%start program

%%

program: /* empty */ | program statement
        ;

statement: declaration
         | assignment_statement
         | while_loop
         | if_statement
         ;

struct_declaration: INT IDENTIFIER OPEN_BRACE struct_member_list CLOSE_BRACE SEMICOLON
                   {
                       printf("Found a struct declaration for '%s'\n", $2);
                   }
                   ;

struct_member_list: /* empty */ 
                  | struct_member_list struct_member
                   ;

struct_member: IDENTIFIER IDENTIFIER SEMICOLON
              ;

assignment_statement: IDENTIFIER ASSIGN expression SEMICOLON
                     ;

while_loop: WHILE '(' expression ')' statement
           ;

if_statement: IF '(' expression ')' statement
            | IF '(' expression ')' statement ELSE statement
            ;

expression: expression '+' expression
          | expression '-' expression
          | expression '*' expression
          | expression '/' expression
          | '-' expression %prec UMINUS
          | '(' expression ')'
          | IDENTIFIER
          | NUMBER
          ;

%%

void yyerror(const char* s) {
    printf("Given code is  InValid\n");
    valid_syntax = 0;
}

int main(int argc, char* argv[]) {
    if (argc < 2) {
        printf("Please provide a file name.\n");
        return 1;
    }

    FILE* file = fopen(argv[1], "r");
    if (!file) {
        printf("File not found.\n");
        return 1;
    }

    yyin = file;
    yyparse();

    if (valid_syntax) {
        printf("Valid\n");
    }

    fclose(file);
    return 0;
}
